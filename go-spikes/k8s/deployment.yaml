apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-spikes
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: go-spikes
  template:
    metadata:
      labels:
        app: go-spikes
      annotations:
        # Annotations for identification
        app: go-spikes
        # CROSS-CUTTING START OF pyroscope CONFIGURATION FOR go-spikes
        pyroscope.io/scrape: "true"
        pyroscope.io/port: "6060"
        # CROSS-CUTTING END OF pyroscope CONFIGURATION FOR go-spikes
    spec:
      containers:
      - name: go-spikes
        image: go-spikes:dev
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8888
          name: http
        # CROSS-CUTTING START OF otel-metrics CONFIGURATION FOR go-spikes
        - containerPort: 8080
          name: metrics
        # CROSS-CUTTING END OF otel-metrics CONFIGURATION FOR go-spikes
        # CROSS-CUTTING START OF pyroscope CONFIGURATION FOR go-spikes
        - containerPort: 6060
          name: pprof
        # CROSS-CUTTING END OF pyroscope CONFIGURATION FOR go-spikes
        env:
        # CROSS-CUTTING START OF otel-tracing CONFIGURATION FOR go-spikes
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "alloy.observability:4317"
        - name: OTEL_SERVICE_NAME
          value: "go-spikes"
        # CROSS-CUTTING END OF otel-tracing CONFIGURATION FOR go-spikes
        # CROSS-CUTTING START OF pyroscope CONFIGURATION FOR go-spikes
        - name: PYROSCOPE_ADDRESS
          value: "http://lgtm.observability:4040"
        # CROSS-CUTTING END OF pyroscope CONFIGURATION FOR go-spikes
        - name: CONFIG_PATH
          value: "/etc/config/config.yaml"
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: config
        configMap:
          name: go-spikes-config
          items:
          - key: config.yaml
            path: config.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: go-spikes
  namespace: default
  # CROSS-CUTTING START OF otel-metrics CONFIGURATION FOR go-spikes
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
    prometheus.io/scheme: "http"
    pyroscope.io/scrape: "true"
    pyroscope.io/port: "6060"
  # CROSS-CUTTING END OF otel-metrics CONFIGURATION FOR go-spikes
spec:
  selector:
    app: go-spikes
  ports:
  - name: http
    port: 8888
    targetPort: 8888
  # CROSS-CUTTING START OF otel-metrics CONFIGURATION FOR go-spikes
  - name: metrics
    port: 8080
    targetPort: 8080
  # CROSS-CUTTING END OF otel-metrics CONFIGURATION FOR go-spikes
  # CROSS-CUTTING START OF pyroscope CONFIGURATION FOR go-spikes
  - name: pprof
    port: 6060
    targetPort: 6060
  # CROSS-CUTTING END OF pyroscope CONFIGURATION FOR go-spikes
  type: ClusterIP