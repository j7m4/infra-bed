apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: observability
data:
  config.alloy: |
    // ⚠️ PROOF-OF-CONCEPT CONFIGURATION ⚠️
    // This configuration is for demonstration purposes only.
    // DO NOT use in production without proper security hardening!
    // 
    // Insecure settings used:
    // - tls.insecure = true
    // - No authentication
    // - Default endpoints and ports
    
    otelcol.receiver.otlp "default" {
      grpc {
        endpoint = "0.0.0.0:4317"
      }
      http {
        endpoint = "0.0.0.0:4318"
      }
      output {
        traces = [otelcol.processor.batch.default.input]
      }
    }

    otelcol.processor.batch "default" {
      output {
        traces = [otelcol.exporter.otlp.tempo.input]
      }
    }

    otelcol.exporter.otlp "tempo" {
      client {
        endpoint = "lgtm:4317"
        tls {
          insecure = true
        }
      }
    }

    // CROSS-CUTTING START OF alloy CONFIGURATION FOR go-spikes
    pyroscope.scrape "pprof" {
      targets = [
        {
          __address__ = "go-spikes.default:6060",
          __scheme__  = "http",
          __profile_path__ = "/debug/pprof/profile?seconds=10",
          service_name = "go-spikes",
          job = "go-spikes-cpu",
          profile_type = "cpu",
        },
        {
          __address__ = "go-spikes.default:6060",
          __scheme__  = "http",
          __profile_path__ = "/debug/pprof/heap",
          service_name = "go-spikes",
          job = "go-spikes-heap",
          profile_type = "heap",
        },
        {
          __address__ = "go-spikes.default:6060",
          __scheme__  = "http",
          __profile_path__ = "/debug/pprof/goroutine",
          service_name = "go-spikes",
          job = "go-spikes-goroutine",
          profile_type = "goroutine",
        },
      ]

      forward_to = [pyroscope.write.lgtm.receiver]
    }

    pyroscope.write "lgtm" {
      endpoint {
        url = "http://pyroscope:4040"
      }
    }
    // CROSS-CUTTING END OF alloy CONFIGURATION FOR go-spikes
    
    // CROSS-CUTTING START OF alloy CONFIGURATION FOR kafka
    prometheus.scrape "kafka_exporter" {
      targets = [
        {
          __address__ = "kafka-exporter.streaming:9308",
          __scheme__  = "http",
          service_name = "kafka",
          job = "kafka-exporter",
        },
      ]
      forward_to = [otelcol.receiver.prometheus.default.receiver]
      scrape_interval = "30s"
    }
    // CROSS-CUTTING END OF alloy CONFIGURATION FOR kafka
    
    // CROSS-CUTTING START OF alloy CONFIGURATION FOR mysql
    prometheus.scrape "mysql_exporter" {
      targets = [
        {
          __address__ = "mysql-exporter.db:9104",
          __scheme__  = "http",
          service_name = "mysql",
          job = "mysql-exporter",
        },
      ]
      forward_to = [otelcol.receiver.prometheus.default.receiver]
      scrape_interval = "30s"
    }
    // CROSS-CUTTING END OF alloy CONFIGURATION FOR mysql
    
    // CROSS-CUTTING START OF alloy CONFIGURATION FOR postgres
    prometheus.scrape "postgres_exporter" {
      targets = [
        {
          __address__ = "postgres-exporter.db:9187",
          __scheme__  = "http",
          service_name = "postgres",
          job = "postgres-exporter",
        },
      ]
      forward_to = [otelcol.receiver.prometheus.default.receiver]
      scrape_interval = "30s"
    }
    // CROSS-CUTTING END OF alloy CONFIGURATION FOR postgres
    
    // Kube-state-metrics scraping
    prometheus.scrape "kube_state_metrics" {
      targets = [
        {
          __address__ = "kube-state-metrics.observability:8080",
          __scheme__  = "http",
          service_name = "kube-state-metrics",
          job = "kube-state-metrics",
        },
      ]
      forward_to = [otelcol.receiver.prometheus.default.receiver]
      scrape_interval = "30s"
    }
    
    // CROSS-CUTTING START OF otel-metrics CONFIGURATION FOR mimir
    // Convert Prometheus metrics to OTLP
    otelcol.receiver.prometheus "default" {
      output {
        metrics = [otelcol.processor.batch.metrics.input]
      }
    }
    
    otelcol.processor.batch "metrics" {
      output {
        metrics = [otelcol.exporter.otlp.lgtm_metrics.input]
      }
    }
    
    // Send metrics to LGTM via OTLP
    otelcol.exporter.otlp "lgtm_metrics" {
      client {
        endpoint = "lgtm:4317"
        tls {
          insecure = true
        }
      }
    }
    // CROSS-CUTTING END OF otel-metrics CONFIGURATION FOR mimir
    